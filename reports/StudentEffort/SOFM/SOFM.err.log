Traceback (most recent call last):
  File "H:\HadiSadoghiYazdi\Circuit\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "H:\HadiSadoghiYazdi\Circuit\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "H:\HadiSadoghiYazdi\Circuit\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Program Files\Python313\Lib\asyncio\base_events.py", line 721, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "H:\HadiSadoghiYazdi\Circuit\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "H:\HadiSadoghiYazdi\Circuit\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "H:\HadiSadoghiYazdi\Circuit\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler


class SOFM:
    def __init__(self, input_dim, map_size, learning_rate=0.5, sigma=None, max_iterations=1000):
        self.input_dim = input_dim
        self.map_size = map_size
        self.learning_rate = learning_rate
        self.sigma = sigma if sigma else map_size / 2
        self.max_iterations = max_iterations
        self.weights = np.random.random((map_size, map_size, input_dim))

    def find_bmu(self, x):
        """ Find the Best Matching Unit (BMU) """
        distances = np.linalg.norm(self.weights - x, axis=-1)
        return np.unravel_index(np.argmin(distances), distances.shape)

    def neighborhood_function(self, bmu, iteration):
        """ Neighborhood function (Gaussian decay) """
        sigma = self.sigma * np.exp(-iteration / (self.max_iterations / np.log(self.sigma)))
        distances = np.linalg.norm(np.indices((self.map_size, self.map_size)).T - np.array(bmu), axis=-1)
        return np.exp(-(distances ** 2) / (2 * (sigma ** 2)))

    def train(self, data):
        for iteration in range(self.max_iterations):
            x = data[np.random.randint(0, len(data))] 
            bmu = self.find_bmu(x)
            learning_rate_t = self.learning_rate * np.exp(-iteration / self.max_iterations)
            neighborhood = self.neighborhood_function(bmu, iteration)
            for i in range(self.map_size):
                for j in range(self.map_size):
                    self.weights[i, j] += learning_rate_t * neighborhood[i, j] * (x - self.weights[i, j])


url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
data = pd.read_csv(url, header=None)


X = data.iloc[:, 1:].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


sofm = SOFM(input_dim=X_scaled.shape[1], map_size=10, learning_rate=0.5, max_iterations=1000)
sofm.train(X_scaled)


plt.figure(figsize=(10, 10))


for i, x in enumerate(X_scaled):
    w = sofm.find_bmu(x)
    plt.text(w[0] + 0.5, w[1] + 0.5, str(i), color=plt.cm.rainbow(i / len(X_scaled)), fontdict={'weight': 'bold', 'fontsize': 11})

plt.xlim([0, sofm.weights.shape[0]])
plt.ylim([0, sofm.weights.shape[1]])
plt.title('Self-Organizing Feature Map (SOFM) - Clustering Data (Without KMeans)')
plt.show()


------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 4[0m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[0;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m----> 4[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpreprocessing[39;00m [38;5;28;01mimport[39;00m StandardScaler
[0;32m      7[0m [38;5;28;01mclass[39;00m [38;5;21;01mSOFM[39;00m:
[0;32m      8[0m     [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, input_dim, map_size, learning_rate[38;5;241m=[39m[38;5;241m0.5[39m, sigma[38;5;241m=[39m[38;5;28;01mNone[39;00m, max_iterations[38;5;241m=[39m[38;5;241m1000[39m):

[1;31mModuleNotFoundError[0m: No module named 'sklearn'

